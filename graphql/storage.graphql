type Query {
  listFiles(
    path: String!
    offset: Int
    limit: Int
    onlyFiles: Boolean
    onlyFolders: Boolean
    extensions: String
    showHidden: Boolean
    sortBy: SortOption
    sortOrder: SortOrder
  ): FileList!

  statFile(path: String!): FileStat

  # Storage Configuration APIs
  storageStatus: StorageStatus!
}

type Mutation {
  # write scope required
  uploadFile(path: String!, content: Upload!): Boolean!
  deleteFile(path: String!): Boolean!
  createFolder(path: String!): Boolean!

  # Storage Configuration APIs (admin only)
  configureFileStorage(input: FileStorageInput!): StorageConfigResult!
  configureS3Storage(input: S3StorageInput!): StorageConfigResult!
  testStorageConfig(input: StorageConfigInput!): StorageTestResult!
}

type FileList {
  items: [FileItem!]!
  totalCount: Int!
}

type FileItem {
  name: String!
  path: String!
  size: Int!
  isDirectory: Boolean!
  thumbnailUrls: ThumbnailUrls
}

type ThumbnailUrls {
  grid: String
  preview: String
  full: String
  original: String
  meta: String
}

type FileStat {
  name: String!
  path: String!
  size: Int!
  isDirectory: Boolean!
  modifiedTime: String!
  etag: String
  thumbnailUrls: ThumbnailUrls
}

enum SortOption {
  NAME
  SIZE
  MODIFIED_TIME
}

enum SortOrder {
  ASC
  DESC
}

scalar Upload

# Storage Configuration Types
type StorageStatus {
  configured: Boolean!
  type: String
  restartRequired: Boolean!
  lastUpdated: String
  isOverriddenByConfig: Boolean!
  fileConfig: FileStorageConfig
  s3Config: S3StorageConfig
}

type FileStorageConfig {
  baseDir: String!
  mkdirPermissions: String!
  writePermissions: String!
}

type S3StorageConfig {
  bucket: String!
  region: String
  endpoint: String
  forcePathStyle: Boolean
  baseDir: String
}

type StorageConfigResult {
  success: Boolean!
  restartRequired: Boolean!
  timestamp: String!
  message: String
}

type StorageTestResult {
  success: Boolean!
  message: String!
  details: String
}

input StorageConfigInput {
  type: StorageType!
  fileConfig: FileStorageInput
  s3Config: S3StorageInput
}

input FileStorageInput {
  baseDir: String!
  mkdirPermissions: String
  writePermissions: String
}

input S3StorageInput {
  bucket: String!
  region: String
  endpoint: String
  forcePathStyle: Boolean
  accessKeyId: String
  secretAccessKey: String
  sessionToken: String
  baseDir: String
}

enum StorageType {
  FILE
  S3
}
