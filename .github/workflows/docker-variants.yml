name: docker-variants

on:
  push:
    branches:
      - main
      - embedded-build
    tags: ["v*.*.*"]

jobs:
  build-variants:
    name: Docker variants
    runs-on: ubuntu-latest
    if: github.repository == 'cshum/imagor-studio'
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        variant:
          - name: embedded
            build_args: |
              EMBEDDED_MODE=true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        if: github.repository == 'cshum/imagor-studio'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            name=ghcr.io/${{ github.repository }}-${{ matrix.variant.name }},enable=true
            name=shumc/imagor-studio-${{ matrix.variant.name }},enable=${{ github.repository == 'cshum/imagor-studio' }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ startsWith(github.ref, 'refs/tags/v') && 'linux/amd64,linux/arm64' || 'linux/amd64' }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ${{ matrix.variant.build_args }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
