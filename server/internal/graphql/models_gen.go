// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"fmt"
	"io"
	"strconv"
)

type File struct {
	Name        string `json:"name"`
	Path        string `json:"path"`
	Size        int    `json:"size"`
	IsDirectory bool   `json:"isDirectory"`
}

type FileList struct {
	Items      []*File `json:"items"`
	TotalCount int     `json:"totalCount"`
}

type FileStat struct {
	Name         string  `json:"name"`
	Path         string  `json:"path"`
	Size         int     `json:"size"`
	IsDirectory  bool    `json:"isDirectory"`
	ModifiedTime string  `json:"modifiedTime"`
	Etag         *string `json:"etag,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type SortOption string

const (
	SortOptionName         SortOption = "NAME"
	SortOptionSize         SortOption = "SIZE"
	SortOptionModifiedTime SortOption = "MODIFIED_TIME"
)

var AllSortOption = []SortOption{
	SortOptionName,
	SortOptionSize,
	SortOptionModifiedTime,
}

func (e SortOption) IsValid() bool {
	switch e {
	case SortOptionName, SortOptionSize, SortOptionModifiedTime:
		return true
	}
	return false
}

func (e SortOption) String() string {
	return string(e)
}

func (e *SortOption) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortOption(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortOption", str)
	}
	return nil
}

func (e SortOption) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortOrder string

const (
	SortOrderAsc  SortOrder = "ASC"
	SortOrderDesc SortOrder = "DESC"
)

var AllSortOrder = []SortOrder{
	SortOrderAsc,
	SortOrderDesc,
}

func (e SortOrder) IsValid() bool {
	switch e {
	case SortOrderAsc, SortOrderDesc:
		return true
	}
	return false
}

func (e SortOrder) String() string {
	return string(e)
}

func (e *SortOrder) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortOrder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortOrder", str)
	}
	return nil
}

func (e SortOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
