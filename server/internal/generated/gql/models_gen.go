// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gql

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type ChangePasswordInput struct {
	CurrentPassword *string `json:"currentPassword,omitempty"`
	NewPassword     string  `json:"newPassword"`
}

type CreateUserInput struct {
	DisplayName string `json:"displayName"`
	Email       string `json:"email"`
	Password    string `json:"password"`
	Role        string `json:"role"`
}

type EmbeddedImagorConfig struct {
	HasCustomSecret bool             `json:"hasCustomSecret"`
	SecretSource    string           `json:"secretSource"`
	CachePath       string           `json:"cachePath"`
	SignerType      ImagorSignerType `json:"signerType"`
	SignerTruncate  int              `json:"signerTruncate"`
	Unsafe          bool             `json:"unsafe"`
}

type EmbeddedImagorInput struct {
	CachePath *string `json:"cachePath,omitempty"`
}

type ExternalImagorConfig struct {
	BaseURL        string           `json:"baseUrl"`
	HasSecret      bool             `json:"hasSecret"`
	Unsafe         bool             `json:"unsafe"`
	SignerType     ImagorSignerType `json:"signerType"`
	SignerTruncate int              `json:"signerTruncate"`
}

type ExternalImagorInput struct {
	BaseURL        string            `json:"baseUrl"`
	Secret         *string           `json:"secret,omitempty"`
	Unsafe         *bool             `json:"unsafe,omitempty"`
	SignerType     *ImagorSignerType `json:"signerType,omitempty"`
	SignerTruncate *int              `json:"signerTruncate,omitempty"`
}

type FileItem struct {
	Name          string         `json:"name"`
	Path          string         `json:"path"`
	Size          int            `json:"size"`
	IsDirectory   bool           `json:"isDirectory"`
	ThumbnailUrls *ThumbnailUrls `json:"thumbnailUrls,omitempty"`
}

type FileList struct {
	Items      []*FileItem `json:"items"`
	TotalCount int         `json:"totalCount"`
}

type FileStat struct {
	Name          string         `json:"name"`
	Path          string         `json:"path"`
	Size          int            `json:"size"`
	IsDirectory   bool           `json:"isDirectory"`
	ModifiedTime  string         `json:"modifiedTime"`
	Etag          *string        `json:"etag,omitempty"`
	ThumbnailUrls *ThumbnailUrls `json:"thumbnailUrls,omitempty"`
}

type FileStorageConfig struct {
	BaseDir          string `json:"baseDir"`
	MkdirPermissions string `json:"mkdirPermissions"`
	WritePermissions string `json:"writePermissions"`
}

type FileStorageInput struct {
	BaseDir          string  `json:"baseDir"`
	MkdirPermissions *string `json:"mkdirPermissions,omitempty"`
	WritePermissions *string `json:"writePermissions,omitempty"`
}

type ImagorConfigResult struct {
	Success         bool    `json:"success"`
	RestartRequired bool    `json:"restartRequired"`
	Timestamp       string  `json:"timestamp"`
	Message         *string `json:"message,omitempty"`
}

type ImagorStatus struct {
	Configured           bool                  `json:"configured"`
	Mode                 *string               `json:"mode,omitempty"`
	RestartRequired      bool                  `json:"restartRequired"`
	LastUpdated          *string               `json:"lastUpdated,omitempty"`
	IsOverriddenByConfig bool                  `json:"isOverriddenByConfig"`
	EmbeddedConfig       *EmbeddedImagorConfig `json:"embeddedConfig,omitempty"`
	ExternalConfig       *ExternalImagorConfig `json:"externalConfig,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type RegistryEntryInput struct {
	Key         string `json:"key"`
	Value       string `json:"value"`
	IsEncrypted bool   `json:"isEncrypted"`
}

type S3StorageConfig struct {
	Bucket         string  `json:"bucket"`
	Region         *string `json:"region,omitempty"`
	Endpoint       *string `json:"endpoint,omitempty"`
	ForcePathStyle *bool   `json:"forcePathStyle,omitempty"`
	BaseDir        *string `json:"baseDir,omitempty"`
}

type S3StorageInput struct {
	Bucket          string  `json:"bucket"`
	Region          *string `json:"region,omitempty"`
	Endpoint        *string `json:"endpoint,omitempty"`
	ForcePathStyle  *bool   `json:"forcePathStyle,omitempty"`
	AccessKeyID     *string `json:"accessKeyId,omitempty"`
	SecretAccessKey *string `json:"secretAccessKey,omitempty"`
	SessionToken    *string `json:"sessionToken,omitempty"`
	BaseDir         *string `json:"baseDir,omitempty"`
}

type StorageConfigInput struct {
	Type       StorageType       `json:"type"`
	FileConfig *FileStorageInput `json:"fileConfig,omitempty"`
	S3Config   *S3StorageInput   `json:"s3Config,omitempty"`
}

type StorageConfigResult struct {
	Success         bool    `json:"success"`
	RestartRequired bool    `json:"restartRequired"`
	Timestamp       string  `json:"timestamp"`
	Message         *string `json:"message,omitempty"`
}

type StorageStatus struct {
	Configured           bool               `json:"configured"`
	Type                 *string            `json:"type,omitempty"`
	RestartRequired      bool               `json:"restartRequired"`
	LastUpdated          *string            `json:"lastUpdated,omitempty"`
	IsOverriddenByConfig bool               `json:"isOverriddenByConfig"`
	FileConfig           *FileStorageConfig `json:"fileConfig,omitempty"`
	S3Config             *S3StorageConfig   `json:"s3Config,omitempty"`
}

type StorageTestResult struct {
	Success bool    `json:"success"`
	Message string  `json:"message"`
	Details *string `json:"details,omitempty"`
}

type SystemRegistry struct {
	Key                  string `json:"key"`
	Value                string `json:"value"`
	IsEncrypted          bool   `json:"isEncrypted"`
	IsOverriddenByConfig bool   `json:"isOverriddenByConfig"`
}

type ThumbnailUrls struct {
	Grid     *string `json:"grid,omitempty"`
	Preview  *string `json:"preview,omitempty"`
	Full     *string `json:"full,omitempty"`
	Original *string `json:"original,omitempty"`
	Meta     *string `json:"meta,omitempty"`
}

type UpdateProfileInput struct {
	DisplayName *string `json:"displayName,omitempty"`
	Email       *string `json:"email,omitempty"`
}

type User struct {
	ID          string `json:"id"`
	DisplayName string `json:"displayName"`
	Email       string `json:"email"`
	Role        string `json:"role"`
	IsActive    bool   `json:"isActive"`
	CreatedAt   string `json:"createdAt"`
	UpdatedAt   string `json:"updatedAt"`
}

type UserList struct {
	Items      []*User `json:"items"`
	TotalCount int     `json:"totalCount"`
}

type UserRegistry struct {
	Key         string `json:"key"`
	Value       string `json:"value"`
	IsEncrypted bool   `json:"isEncrypted"`
}

type ImagorMode string

const (
	ImagorModeEmbedded ImagorMode = "EMBEDDED"
	ImagorModeExternal ImagorMode = "EXTERNAL"
)

var AllImagorMode = []ImagorMode{
	ImagorModeEmbedded,
	ImagorModeExternal,
}

func (e ImagorMode) IsValid() bool {
	switch e {
	case ImagorModeEmbedded, ImagorModeExternal:
		return true
	}
	return false
}

func (e ImagorMode) String() string {
	return string(e)
}

func (e *ImagorMode) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImagorMode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImagorMode", str)
	}
	return nil
}

func (e ImagorMode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ImagorMode) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ImagorMode) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type ImagorSignerType string

const (
	ImagorSignerTypeSha1   ImagorSignerType = "SHA1"
	ImagorSignerTypeSha256 ImagorSignerType = "SHA256"
	ImagorSignerTypeSha512 ImagorSignerType = "SHA512"
)

var AllImagorSignerType = []ImagorSignerType{
	ImagorSignerTypeSha1,
	ImagorSignerTypeSha256,
	ImagorSignerTypeSha512,
}

func (e ImagorSignerType) IsValid() bool {
	switch e {
	case ImagorSignerTypeSha1, ImagorSignerTypeSha256, ImagorSignerTypeSha512:
		return true
	}
	return false
}

func (e ImagorSignerType) String() string {
	return string(e)
}

func (e *ImagorSignerType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ImagorSignerType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ImagorSignerType", str)
	}
	return nil
}

func (e ImagorSignerType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *ImagorSignerType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e ImagorSignerType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type SortOption string

const (
	SortOptionName         SortOption = "NAME"
	SortOptionSize         SortOption = "SIZE"
	SortOptionModifiedTime SortOption = "MODIFIED_TIME"
)

var AllSortOption = []SortOption{
	SortOptionName,
	SortOptionSize,
	SortOptionModifiedTime,
}

func (e SortOption) IsValid() bool {
	switch e {
	case SortOptionName, SortOptionSize, SortOptionModifiedTime:
		return true
	}
	return false
}

func (e SortOption) String() string {
	return string(e)
}

func (e *SortOption) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortOption(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortOption", str)
	}
	return nil
}

func (e SortOption) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SortOption) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SortOption) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type SortOrder string

const (
	SortOrderAsc  SortOrder = "ASC"
	SortOrderDesc SortOrder = "DESC"
)

var AllSortOrder = []SortOrder{
	SortOrderAsc,
	SortOrderDesc,
}

func (e SortOrder) IsValid() bool {
	switch e {
	case SortOrderAsc, SortOrderDesc:
		return true
	}
	return false
}

func (e SortOrder) String() string {
	return string(e)
}

func (e *SortOrder) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortOrder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortOrder", str)
	}
	return nil
}

func (e SortOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SortOrder) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SortOrder) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type StorageType string

const (
	StorageTypeFile StorageType = "FILE"
	StorageTypeS3   StorageType = "S3"
)

var AllStorageType = []StorageType{
	StorageTypeFile,
	StorageTypeS3,
}

func (e StorageType) IsValid() bool {
	switch e {
	case StorageTypeFile, StorageTypeS3:
		return true
	}
	return false
}

func (e StorageType) String() string {
	return string(e)
}

func (e *StorageType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StorageType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StorageType", str)
	}
	return nil
}

func (e StorageType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *StorageType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e StorageType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
