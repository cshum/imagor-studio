// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cshum/imagor-studio/server/ent/predicate"
	"github.com/cshum/imagor-studio/server/ent/storage"
)

// StorageUpdate is the builder for updating Storage entities.
type StorageUpdate struct {
	config
	hooks    []Hook
	mutation *StorageMutation
}

// Where appends a list predicates to the StorageUpdate builder.
func (su *StorageUpdate) Where(ps ...predicate.Storage) *StorageUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *StorageUpdate) SetName(s string) *StorageUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *StorageUpdate) SetNillableName(s *string) *StorageUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetKey sets the "key" field.
func (su *StorageUpdate) SetKey(s string) *StorageUpdate {
	su.mutation.SetKey(s)
	return su
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (su *StorageUpdate) SetNillableKey(s *string) *StorageUpdate {
	if s != nil {
		su.SetKey(*s)
	}
	return su
}

// SetType sets the "type" field.
func (su *StorageUpdate) SetType(s string) *StorageUpdate {
	su.mutation.SetType(s)
	return su
}

// SetNillableType sets the "type" field if the given value is not nil.
func (su *StorageUpdate) SetNillableType(s *string) *StorageUpdate {
	if s != nil {
		su.SetType(*s)
	}
	return su
}

// SetConfig sets the "config" field.
func (su *StorageUpdate) SetConfig(s string) *StorageUpdate {
	su.mutation.SetConfig(s)
	return su
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (su *StorageUpdate) SetNillableConfig(s *string) *StorageUpdate {
	if s != nil {
		su.SetConfig(*s)
	}
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *StorageUpdate) SetCreatedAt(t time.Time) *StorageUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *StorageUpdate) SetNillableCreatedAt(t *time.Time) *StorageUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StorageUpdate) SetUpdatedAt(t time.Time) *StorageUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// Mutation returns the StorageMutation object of the builder.
func (su *StorageUpdate) Mutation() *StorageMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StorageUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StorageUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StorageUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StorageUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StorageUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := storage.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StorageUpdate) check() error {
	if v, ok := su.mutation.Name(); ok {
		if err := storage.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Storage.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Key(); ok {
		if err := storage.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "Storage.key": %w`, err)}
		}
	}
	if v, ok := su.mutation.GetType(); ok {
		if err := storage.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Storage.type": %w`, err)}
		}
	}
	if v, ok := su.mutation.Config(); ok {
		if err := storage.ConfigValidator(v); err != nil {
			return &ValidationError{Name: "config", err: fmt.Errorf(`ent: validator failed for field "Storage.config": %w`, err)}
		}
	}
	return nil
}

func (su *StorageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(storage.Table, storage.Columns, sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(storage.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Key(); ok {
		_spec.SetField(storage.FieldKey, field.TypeString, value)
	}
	if value, ok := su.mutation.GetType(); ok {
		_spec.SetField(storage.FieldType, field.TypeString, value)
	}
	if value, ok := su.mutation.Config(); ok {
		_spec.SetField(storage.FieldConfig, field.TypeString, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(storage.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(storage.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StorageUpdateOne is the builder for updating a single Storage entity.
type StorageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StorageMutation
}

// SetName sets the "name" field.
func (suo *StorageUpdateOne) SetName(s string) *StorageUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *StorageUpdateOne) SetNillableName(s *string) *StorageUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetKey sets the "key" field.
func (suo *StorageUpdateOne) SetKey(s string) *StorageUpdateOne {
	suo.mutation.SetKey(s)
	return suo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (suo *StorageUpdateOne) SetNillableKey(s *string) *StorageUpdateOne {
	if s != nil {
		suo.SetKey(*s)
	}
	return suo
}

// SetType sets the "type" field.
func (suo *StorageUpdateOne) SetType(s string) *StorageUpdateOne {
	suo.mutation.SetType(s)
	return suo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (suo *StorageUpdateOne) SetNillableType(s *string) *StorageUpdateOne {
	if s != nil {
		suo.SetType(*s)
	}
	return suo
}

// SetConfig sets the "config" field.
func (suo *StorageUpdateOne) SetConfig(s string) *StorageUpdateOne {
	suo.mutation.SetConfig(s)
	return suo
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (suo *StorageUpdateOne) SetNillableConfig(s *string) *StorageUpdateOne {
	if s != nil {
		suo.SetConfig(*s)
	}
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *StorageUpdateOne) SetCreatedAt(t time.Time) *StorageUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *StorageUpdateOne) SetNillableCreatedAt(t *time.Time) *StorageUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StorageUpdateOne) SetUpdatedAt(t time.Time) *StorageUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// Mutation returns the StorageMutation object of the builder.
func (suo *StorageUpdateOne) Mutation() *StorageMutation {
	return suo.mutation
}

// Where appends a list predicates to the StorageUpdate builder.
func (suo *StorageUpdateOne) Where(ps ...predicate.Storage) *StorageUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StorageUpdateOne) Select(field string, fields ...string) *StorageUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Storage entity.
func (suo *StorageUpdateOne) Save(ctx context.Context) (*Storage, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StorageUpdateOne) SaveX(ctx context.Context) *Storage {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StorageUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StorageUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StorageUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := storage.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StorageUpdateOne) check() error {
	if v, ok := suo.mutation.Name(); ok {
		if err := storage.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Storage.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Key(); ok {
		if err := storage.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "Storage.key": %w`, err)}
		}
	}
	if v, ok := suo.mutation.GetType(); ok {
		if err := storage.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Storage.type": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Config(); ok {
		if err := storage.ConfigValidator(v); err != nil {
			return &ValidationError{Name: "config", err: fmt.Errorf(`ent: validator failed for field "Storage.config": %w`, err)}
		}
	}
	return nil
}

func (suo *StorageUpdateOne) sqlSave(ctx context.Context) (_node *Storage, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(storage.Table, storage.Columns, sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Storage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, storage.FieldID)
		for _, f := range fields {
			if !storage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != storage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(storage.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Key(); ok {
		_spec.SetField(storage.FieldKey, field.TypeString, value)
	}
	if value, ok := suo.mutation.GetType(); ok {
		_spec.SetField(storage.FieldType, field.TypeString, value)
	}
	if value, ok := suo.mutation.Config(); ok {
		_spec.SetField(storage.FieldConfig, field.TypeString, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(storage.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(storage.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Storage{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
