type Query {
    listFiles(
        path: String!
        offset: Int!
        limit: Int!
        onlyFiles: Boolean
        onlyFolders: Boolean
        sortBy: SortOption
        sortOrder: SortOrder
    ): FileList!

    statFile(path: String!): FileStat

    # Metadata APIs
    listUserMetadata(prefix: String, ownerID: String): [Metadata!]!
    getUserMetadata(key: String!, ownerID: String): Metadata
    listSystemMetadata(prefix: String): [Metadata!]!
    getSystemMetadata(key: String!): Metadata

    me: User

    # admin only operations
    user(id: ID!): User
    users(offset: Int = 0, limit: Int = 20): UserList!
}

type Mutation {
    # write scope required
    uploadFile(path: String!, content: Upload!): Boolean!
    deleteFile(path: String!): Boolean!
    createFolder(path: String!): Boolean!

    # self operations, or admin scope with userId
    updateProfile(input: UpdateProfileInput!, userId: ID): User!
    changePassword(input: ChangePasswordInput!, userId: ID): Boolean!
    deactivateAccount(userId: ID): Boolean!

    # User Metadata APIs
    setUserMetadata(key: String!, value: String!, ownerID: String): Metadata!
    deleteUserMetadata(key: String!, ownerID: String): Boolean!

    # System Metadata APIs (admin only for write)
    setSystemMetadata(key: String!, value: String!): Metadata!
    deleteSystemMetadata(key: String!): Boolean!

    # admin only operations
    createUser(input: CreateUserInput!): User!
}

type User {
    id: ID!
    displayName: String!
    email: String!
    role: String!
    isActive: Boolean!
    createdAt: String!
    updatedAt: String!
}

type UserList {
    items: [User!]!
    totalCount: Int!
}

input UpdateProfileInput {
    displayName: String
    email: String
}

input ChangePasswordInput {
    currentPassword: String  # Optional when admin is changing another user's password
    newPassword: String!
}

input CreateUserInput {
    displayName: String!
    email: String!
    password: String!
    role: String!
}

# Existing types...
type FileList {
    items: [FileItem!]!
    totalCount: Int!
}

type FileItem {
    name: String!
    path: String!
    size: Int!
    isDirectory: Boolean!
}

type FileStat {
    name: String!
    path: String!
    size: Int!
    isDirectory: Boolean!
    modifiedTime: String!
    etag: String
}

enum SortOption {
    NAME
    SIZE
    MODIFIED_TIME
}

enum SortOrder {
    ASC
    DESC
}

scalar Upload

type Metadata {
    key: String!
    value: String!
    ownerID: String!
    createdAt: String!
    updatedAt: String!
}

scalar JSON
