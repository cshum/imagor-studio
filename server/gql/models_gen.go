// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gql

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type ChangePasswordInput struct {
	CurrentPassword *string `json:"currentPassword,omitempty"`
	NewPassword     string  `json:"newPassword"`
}

type FileItem struct {
	Name        string `json:"name"`
	Path        string `json:"path"`
	Size        int    `json:"size"`
	IsDirectory bool   `json:"isDirectory"`
}

type FileList struct {
	Items      []*FileItem `json:"items"`
	TotalCount int         `json:"totalCount"`
}

type FileStat struct {
	Name         string  `json:"name"`
	Path         string  `json:"path"`
	Size         int     `json:"size"`
	IsDirectory  bool    `json:"isDirectory"`
	ModifiedTime string  `json:"modifiedTime"`
	Etag         *string `json:"etag,omitempty"`
}

type Metadata struct {
	Key       string `json:"key"`
	Value     string `json:"value"`
	CreatedAt string `json:"createdAt"`
	UpdatedAt string `json:"updatedAt"`
}

type Mutation struct {
}

type Query struct {
}

type UpdateProfileInput struct {
	Username *string `json:"username,omitempty"`
	Email    *string `json:"email,omitempty"`
}

type User struct {
	ID        string `json:"id"`
	Username  string `json:"username"`
	Email     string `json:"email"`
	Role      string `json:"role"`
	IsActive  bool   `json:"isActive"`
	CreatedAt string `json:"createdAt"`
	UpdatedAt string `json:"updatedAt"`
}

type UserList struct {
	Items      []*User `json:"items"`
	TotalCount int     `json:"totalCount"`
}

type SortOption string

const (
	SortOptionName         SortOption = "NAME"
	SortOptionSize         SortOption = "SIZE"
	SortOptionModifiedTime SortOption = "MODIFIED_TIME"
)

var AllSortOption = []SortOption{
	SortOptionName,
	SortOptionSize,
	SortOptionModifiedTime,
}

func (e SortOption) IsValid() bool {
	switch e {
	case SortOptionName, SortOptionSize, SortOptionModifiedTime:
		return true
	}
	return false
}

func (e SortOption) String() string {
	return string(e)
}

func (e *SortOption) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortOption(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortOption", str)
	}
	return nil
}

func (e SortOption) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SortOption) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SortOption) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type SortOrder string

const (
	SortOrderAsc  SortOrder = "ASC"
	SortOrderDesc SortOrder = "DESC"
)

var AllSortOrder = []SortOrder{
	SortOrderAsc,
	SortOrderDesc,
}

func (e SortOrder) IsValid() bool {
	switch e {
	case SortOrderAsc, SortOrderDesc:
		return true
	}
	return false
}

func (e SortOrder) String() string {
	return string(e)
}

func (e *SortOrder) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortOrder(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortOrder", str)
	}
	return nil
}

func (e SortOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SortOrder) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SortOrder) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
